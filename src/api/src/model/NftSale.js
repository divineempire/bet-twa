/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NftMarket from './NftMarket';
import NftOwner from './NftOwner';
import NftPrice from './NftPrice';

/**
 * The NftSale model module.
 * @module model/NftSale
 * @version 0.1.0
 */
class NftSale {
    /**
     * Constructs a new <code>NftSale</code>.
     * @alias module:model/NftSale
     * @param address {String} 
     * @param market {module:model/NftMarket} 
     * @param owner {module:model/NftOwner} 
     * @param price {module:model/NftPrice} 
     */
    constructor(address, market, owner, price) { 
        
        NftSale.initialize(this, address, market, owner, price);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, market, owner, price) { 
        obj['address'] = address;
        obj['market'] = market;
        obj['owner'] = owner;
        obj['price'] = price;
    }

    /**
     * Constructs a <code>NftSale</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NftSale} obj Optional instance to populate.
     * @return {module:model/NftSale} The populated <code>NftSale</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NftSale();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('market')) {
                obj['market'] = NftMarket.constructFromObject(data['market']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = NftOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = NftPrice.constructFromObject(data['price']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NftSale</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NftSale</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NftSale.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `market`
        if (data['market']) { // data not null
          NftMarket.validateJSON(data['market']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          NftOwner.validateJSON(data['owner']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          NftPrice.validateJSON(data['price']);
        }

        return true;
    }


}

NftSale.RequiredProperties = ["address", "market", "owner", "price"];

/**
 * @member {String} address
 */
NftSale.prototype['address'] = undefined;

/**
 * @member {module:model/NftMarket} market
 */
NftSale.prototype['market'] = undefined;

/**
 * @member {module:model/NftOwner} owner
 */
NftSale.prototype['owner'] = undefined;

/**
 * @member {module:model/NftPrice} price
 */
NftSale.prototype['price'] = undefined;






export default NftSale;

