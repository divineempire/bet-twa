/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NftCollection from './NftCollection';
import NftOwner from './NftOwner';
import NftPreview from './NftPreview';
import NftSale from './NftSale';

/**
 * The NftItem model module.
 * @module model/NftItem
 * @version 0.1.0
 */
class NftItem {
    /**
     * Constructs a new <code>NftItem</code>.
     * @alias module:model/NftItem
     * @param address {String} 
     * @param index {Number} 
     * @param owner {module:model/NftOwner} 
     * @param collection {module:model/NftCollection} 
     * @param verified {Boolean} 
     * @param metadata {Object} 
     * @param previews {Array.<module:model/NftPreview>} 
     * @param approved_by {Array.<String>} 
     */
    constructor(address, index, owner, collection, verified, metadata, previews, approved_by) { 
        
        NftItem.initialize(this, address, index, owner, collection, verified, metadata, previews, approved_by);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, index, owner, collection, verified, metadata, previews, approved_by) { 
        obj['address'] = address;
        obj['index'] = index;
        obj['owner'] = owner;
        obj['collection'] = collection;
        obj['verified'] = verified;
        obj['metadata'] = metadata;
        obj['previews'] = previews;
        obj['approved_by'] = approved_by;
    }

    /**
     * Constructs a <code>NftItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NftItem} obj Optional instance to populate.
     * @return {module:model/NftItem} The populated <code>NftItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NftItem();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = NftOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('collection')) {
                obj['collection'] = NftCollection.constructFromObject(data['collection']);
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('sale')) {
                obj['sale'] = NftSale.constructFromObject(data['sale']);
            }
            if (data.hasOwnProperty('previews')) {
                obj['previews'] = ApiClient.convertToType(data['previews'], [NftPreview]);
            }
            if (data.hasOwnProperty('dns')) {
                obj['dns'] = ApiClient.convertToType(data['dns'], 'String');
            }
            if (data.hasOwnProperty('approved_by')) {
                obj['approved_by'] = ApiClient.convertToType(data['approved_by'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NftItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NftItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NftItem.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          NftOwner.validateJSON(data['owner']);
        }
        // validate the optional field `collection`
        if (data['collection']) { // data not null
          NftCollection.validateJSON(data['collection']);
        }
        // validate the optional field `sale`
        if (data['sale']) { // data not null
          NftSale.validateJSON(data['sale']);
        }
        if (data['previews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previews'])) {
                throw new Error("Expected the field `previews` to be an array in the JSON data but got " + data['previews']);
            }
            // validate the optional field `previews` (array)
            for (const item of data['previews']) {
                NftPreview.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dns'] && !(typeof data['dns'] === 'string' || data['dns'] instanceof String)) {
            throw new Error("Expected the field `dns` to be a primitive type in the JSON string but got " + data['dns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['approved_by'])) {
            throw new Error("Expected the field `approved_by` to be an array in the JSON data but got " + data['approved_by']);
        }

        return true;
    }


}

NftItem.RequiredProperties = ["address", "index", "owner", "collection", "verified", "metadata", "previews", "approved_by"];

/**
 * @member {String} address
 */
NftItem.prototype['address'] = undefined;

/**
 * @member {Number} index
 */
NftItem.prototype['index'] = undefined;

/**
 * @member {module:model/NftOwner} owner
 */
NftItem.prototype['owner'] = undefined;

/**
 * @member {module:model/NftCollection} collection
 */
NftItem.prototype['collection'] = undefined;

/**
 * @member {Boolean} verified
 */
NftItem.prototype['verified'] = undefined;

/**
 * @member {Object} metadata
 */
NftItem.prototype['metadata'] = undefined;

/**
 * @member {module:model/NftSale} sale
 */
NftItem.prototype['sale'] = undefined;

/**
 * @member {Array.<module:model/NftPreview>} previews
 */
NftItem.prototype['previews'] = undefined;

/**
 * @member {String} dns
 */
NftItem.prototype['dns'] = undefined;

/**
 * @member {Array.<String>} approved_by
 */
NftItem.prototype['approved_by'] = undefined;






export default NftItem;

