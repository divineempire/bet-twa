/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BetType from './BetType';
import PhaseType from './PhaseType';
import SportTeam from './SportTeam';
import SportTournament from './SportTournament';

/**
 * The SportMatchRead model module.
 * @module model/SportMatchRead
 * @version 0.1.0
 */
class SportMatchRead {
    /**
     * Constructs a new <code>SportMatchRead</code>.
     * @alias module:model/SportMatchRead
     * @param match_start_time {Number} 
     * @param team1_id {Number} 
     * @param team2_id {Number} 
     * @param bookmaker_match_id {Number} 
     * @param sport_id {Number} 
     * @param team1 {module:model/SportTeam} 
     * @param team2 {module:model/SportTeam} 
     * @param id {Number} 
     * @param tournament {module:model/SportTournament} 
     */
    constructor(match_start_time, team1_id, team2_id, bookmaker_match_id, sport_id, team1, team2, id, tournament) { 
        
        SportMatchRead.initialize(this, match_start_time, team1_id, team2_id, bookmaker_match_id, sport_id, team1, team2, id, tournament);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, match_start_time, team1_id, team2_id, bookmaker_match_id, sport_id, team1, team2, id, tournament) { 
        obj['match_start_time'] = match_start_time;
        obj['team1_id'] = team1_id;
        obj['team2_id'] = team2_id;
        obj['bookmaker_match_id'] = bookmaker_match_id;
        obj['sport_id'] = sport_id;
        obj['team1'] = team1;
        obj['team2'] = team2;
        obj['id'] = id;
        obj['tournament'] = tournament;
    }

    /**
     * Constructs a <code>SportMatchRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SportMatchRead} obj Optional instance to populate.
     * @return {module:model/SportMatchRead} The populated <code>SportMatchRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SportMatchRead();

            if (data.hasOwnProperty('tournament_id')) {
                obj['tournament_id'] = ApiClient.convertToType(data['tournament_id'], 'Number');
            }
            if (data.hasOwnProperty('match_start_time')) {
                obj['match_start_time'] = ApiClient.convertToType(data['match_start_time'], 'Number');
            }
            if (data.hasOwnProperty('match_time')) {
                obj['match_time'] = ApiClient.convertToType(data['match_time'], 'Number');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Boolean');
            }
            if (data.hasOwnProperty('fantasy')) {
                obj['fantasy'] = ApiClient.convertToType(data['fantasy'], 'Boolean');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ApiClient.convertToType(data['phase'], PhaseType);
            }
            if (data.hasOwnProperty('team1_id')) {
                obj['team1_id'] = ApiClient.convertToType(data['team1_id'], 'Number');
            }
            if (data.hasOwnProperty('team2_id')) {
                obj['team2_id'] = ApiClient.convertToType(data['team2_id'], 'Number');
            }
            if (data.hasOwnProperty('bookmaker_match_id')) {
                obj['bookmaker_match_id'] = ApiClient.convertToType(data['bookmaker_match_id'], 'Number');
            }
            if (data.hasOwnProperty('team1_score')) {
                obj['team1_score'] = ApiClient.convertToType(data['team1_score'], 'Number');
            }
            if (data.hasOwnProperty('team2_score')) {
                obj['team2_score'] = ApiClient.convertToType(data['team2_score'], 'Number');
            }
            if (data.hasOwnProperty('team1_ratio')) {
                obj['team1_ratio'] = ApiClient.convertToType(data['team1_ratio'], 'Number');
            }
            if (data.hasOwnProperty('team2_ratio')) {
                obj['team2_ratio'] = ApiClient.convertToType(data['team2_ratio'], 'Number');
            }
            if (data.hasOwnProperty('draw_ratio')) {
                obj['draw_ratio'] = ApiClient.convertToType(data['draw_ratio'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = BetType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('sport_id')) {
                obj['sport_id'] = ApiClient.convertToType(data['sport_id'], 'Number');
            }
            if (data.hasOwnProperty('team1')) {
                obj['team1'] = SportTeam.constructFromObject(data['team1']);
            }
            if (data.hasOwnProperty('team2')) {
                obj['team2'] = SportTeam.constructFromObject(data['team2']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('tournament')) {
                obj['tournament'] = SportTournament.constructFromObject(data['tournament']);
            }
            if (data.hasOwnProperty('total_bets')) {
                obj['total_bets'] = ApiClient.convertToType(data['total_bets'], 'Number');
            }
            if (data.hasOwnProperty('total_win_bets')) {
                obj['total_win_bets'] = ApiClient.convertToType(data['total_win_bets'], 'Number');
            }
            if (data.hasOwnProperty('total_earned_tons')) {
                obj['total_earned_tons'] = ApiClient.convertToType(data['total_earned_tons'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('team1_summary')) {
                obj['team1_summary'] = ApiClient.convertToType(data['team1_summary'], 'Number');
            }
            if (data.hasOwnProperty('team2_summary')) {
                obj['team2_summary'] = ApiClient.convertToType(data['team2_summary'], 'Number');
            }
            if (data.hasOwnProperty('draw_summary')) {
                obj['draw_summary'] = ApiClient.convertToType(data['draw_summary'], 'Number');
            }
            if (data.hasOwnProperty('contract_address')) {
                obj['contract_address'] = ApiClient.convertToType(data['contract_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SportMatchRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SportMatchRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SportMatchRead.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `team1`
        if (data['team1']) { // data not null
          SportTeam.validateJSON(data['team1']);
        }
        // validate the optional field `team2`
        if (data['team2']) { // data not null
          SportTeam.validateJSON(data['team2']);
        }
        // validate the optional field `tournament`
        if (data['tournament']) { // data not null
          SportTournament.validateJSON(data['tournament']);
        }
        // ensure the json data is a string
        if (data['contract_address'] && !(typeof data['contract_address'] === 'string' || data['contract_address'] instanceof String)) {
            throw new Error("Expected the field `contract_address` to be a primitive type in the JSON string but got " + data['contract_address']);
        }

        return true;
    }


}

SportMatchRead.RequiredProperties = ["match_start_time", "team1_id", "team2_id", "bookmaker_match_id", "sport_id", "team1", "team2", "id", "tournament"];

/**
 * @member {Number} tournament_id
 */
SportMatchRead.prototype['tournament_id'] = undefined;

/**
 * @member {Number} match_start_time
 */
SportMatchRead.prototype['match_start_time'] = undefined;

/**
 * @member {Number} match_time
 */
SportMatchRead.prototype['match_time'] = undefined;

/**
 * @member {Boolean} finished
 * @default false
 */
SportMatchRead.prototype['finished'] = false;

/**
 * @member {Boolean} fantasy
 * @default false
 */
SportMatchRead.prototype['fantasy'] = false;

/**
 * @member {module:model/PhaseType} phase
 */
SportMatchRead.prototype['phase'] = undefined;

/**
 * @member {Number} team1_id
 */
SportMatchRead.prototype['team1_id'] = undefined;

/**
 * @member {Number} team2_id
 */
SportMatchRead.prototype['team2_id'] = undefined;

/**
 * @member {Number} bookmaker_match_id
 */
SportMatchRead.prototype['bookmaker_match_id'] = undefined;

/**
 * @member {Number} team1_score
 */
SportMatchRead.prototype['team1_score'] = undefined;

/**
 * @member {Number} team2_score
 */
SportMatchRead.prototype['team2_score'] = undefined;

/**
 * @member {Number} team1_ratio
 */
SportMatchRead.prototype['team1_ratio'] = undefined;

/**
 * @member {Number} team2_ratio
 */
SportMatchRead.prototype['team2_ratio'] = undefined;

/**
 * @member {Number} draw_ratio
 */
SportMatchRead.prototype['draw_ratio'] = undefined;

/**
 * @member {module:model/BetType} type
 */
SportMatchRead.prototype['type'] = undefined;

/**
 * @member {Number} sport_id
 */
SportMatchRead.prototype['sport_id'] = undefined;

/**
 * @member {module:model/SportTeam} team1
 */
SportMatchRead.prototype['team1'] = undefined;

/**
 * @member {module:model/SportTeam} team2
 */
SportMatchRead.prototype['team2'] = undefined;

/**
 * @member {Number} id
 */
SportMatchRead.prototype['id'] = undefined;

/**
 * @member {module:model/SportTournament} tournament
 */
SportMatchRead.prototype['tournament'] = undefined;

/**
 * @member {Number} total_bets
 */
SportMatchRead.prototype['total_bets'] = undefined;

/**
 * @member {Number} total_win_bets
 */
SportMatchRead.prototype['total_win_bets'] = undefined;

/**
 * @member {Number} total_earned_tons
 */
SportMatchRead.prototype['total_earned_tons'] = undefined;

/**
 * @member {Number} fee
 */
SportMatchRead.prototype['fee'] = undefined;

/**
 * @member {Number} team1_summary
 */
SportMatchRead.prototype['team1_summary'] = undefined;

/**
 * @member {Number} team2_summary
 */
SportMatchRead.prototype['team2_summary'] = undefined;

/**
 * @member {Number} draw_summary
 */
SportMatchRead.prototype['draw_summary'] = undefined;

/**
 * @member {String} contract_address
 */
SportMatchRead.prototype['contract_address'] = undefined;






export default SportMatchRead;

