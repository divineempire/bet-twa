/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookmakerBaseOdd from './BookmakerBaseOdd';
import MatchScore from './MatchScore';
import Meta from './Meta';
import PeriodScore from './PeriodScore';

/**
 * The BookmakerMatch model module.
 * @module model/BookmakerMatch
 * @version 0.1.0
 */
class BookmakerMatch {
    /**
     * Constructs a new <code>BookmakerMatch</code>.
     * @alias module:model/BookmakerMatch
     * @param id {Number} 
     * @param providerId {Number} 
     * @param service {String} 
     * @param tournamentId {Number} 
     * @param categoryId {Number} 
     * @param sportId {Number} 
     * @param homeTeamId {String} 
     * @param awayTeamId {String} 
     * @param dateOfMatch {Number} 
     * @param active {Number} 
     * @param matchScore {module:model/MatchScore} 
     * @param periodsScore {Array.<module:model/PeriodScore>} 
     * @param gameScore {Object} 
     * @param outright {Boolean} 
     * @param isHot {Boolean} 
     * @param homeTeamName {String} 
     * @param enabledOddsCount {Number} 
     */
    constructor(id, providerId, service, tournamentId, categoryId, sportId, homeTeamId, awayTeamId, dateOfMatch, active, matchScore, periodsScore, gameScore, outright, isHot, homeTeamName, enabledOddsCount) { 
        
        BookmakerMatch.initialize(this, id, providerId, service, tournamentId, categoryId, sportId, homeTeamId, awayTeamId, dateOfMatch, active, matchScore, periodsScore, gameScore, outright, isHot, homeTeamName, enabledOddsCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, providerId, service, tournamentId, categoryId, sportId, homeTeamId, awayTeamId, dateOfMatch, active, matchScore, periodsScore, gameScore, outright, isHot, homeTeamName, enabledOddsCount) { 
        obj['id'] = id;
        obj['providerId'] = providerId;
        obj['service'] = service;
        obj['tournamentId'] = tournamentId;
        obj['categoryId'] = categoryId;
        obj['sportId'] = sportId;
        obj['homeTeamId'] = homeTeamId;
        obj['awayTeamId'] = awayTeamId;
        obj['dateOfMatch'] = dateOfMatch;
        obj['active'] = active;
        obj['matchScore'] = matchScore;
        obj['periodsScore'] = periodsScore;
        obj['gameScore'] = gameScore;
        obj['outright'] = outright;
        obj['isHot'] = isHot;
        obj['homeTeamName'] = homeTeamName;
        obj['enabledOddsCount'] = enabledOddsCount;
    }

    /**
     * Constructs a <code>BookmakerMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookmakerMatch} obj Optional instance to populate.
     * @return {module:model/BookmakerMatch} The populated <code>BookmakerMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookmakerMatch();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'Number');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('tournamentId')) {
                obj['tournamentId'] = ApiClient.convertToType(data['tournamentId'], 'Number');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('sportId')) {
                obj['sportId'] = ApiClient.convertToType(data['sportId'], 'Number');
            }
            if (data.hasOwnProperty('homeTeamId')) {
                obj['homeTeamId'] = ApiClient.convertToType(data['homeTeamId'], 'String');
            }
            if (data.hasOwnProperty('awayTeamId')) {
                obj['awayTeamId'] = ApiClient.convertToType(data['awayTeamId'], 'String');
            }
            if (data.hasOwnProperty('dateOfMatch')) {
                obj['dateOfMatch'] = ApiClient.convertToType(data['dateOfMatch'], 'Number');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('matchTime')) {
                obj['matchTime'] = ApiClient.convertToType(data['matchTime'], 'Number');
            }
            if (data.hasOwnProperty('matchScore')) {
                obj['matchScore'] = MatchScore.constructFromObject(data['matchScore']);
            }
            if (data.hasOwnProperty('periodsScore')) {
                obj['periodsScore'] = ApiClient.convertToType(data['periodsScore'], [PeriodScore]);
            }
            if (data.hasOwnProperty('gameScore')) {
                obj['gameScore'] = ApiClient.convertToType(data['gameScore'], Object);
            }
            if (data.hasOwnProperty('activeTeam')) {
                obj['activeTeam'] = ApiClient.convertToType(data['activeTeam'], 'Number');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('outright')) {
                obj['outright'] = ApiClient.convertToType(data['outright'], 'Boolean');
            }
            if (data.hasOwnProperty('isHot')) {
                obj['isHot'] = ApiClient.convertToType(data['isHot'], 'Boolean');
            }
            if (data.hasOwnProperty('homeTeamName')) {
                obj['homeTeamName'] = ApiClient.convertToType(data['homeTeamName'], 'String');
            }
            if (data.hasOwnProperty('awayTeamName')) {
                obj['awayTeamName'] = ApiClient.convertToType(data['awayTeamName'], 'String');
            }
            if (data.hasOwnProperty('enabledOddsCount')) {
                obj['enabledOddsCount'] = ApiClient.convertToType(data['enabledOddsCount'], 'Number');
            }
            if (data.hasOwnProperty('baseOdds')) {
                obj['baseOdds'] = ApiClient.convertToType(data['baseOdds'], [BookmakerBaseOdd]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookmakerMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookmakerMatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BookmakerMatch.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['homeTeamId'] && !(typeof data['homeTeamId'] === 'string' || data['homeTeamId'] instanceof String)) {
            throw new Error("Expected the field `homeTeamId` to be a primitive type in the JSON string but got " + data['homeTeamId']);
        }
        // ensure the json data is a string
        if (data['awayTeamId'] && !(typeof data['awayTeamId'] === 'string' || data['awayTeamId'] instanceof String)) {
            throw new Error("Expected the field `awayTeamId` to be a primitive type in the JSON string but got " + data['awayTeamId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `matchScore`
        if (data['matchScore']) { // data not null
          MatchScore.validateJSON(data['matchScore']);
        }
        if (data['periodsScore']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['periodsScore'])) {
                throw new Error("Expected the field `periodsScore` to be an array in the JSON data but got " + data['periodsScore']);
            }
            // validate the optional field `periodsScore` (array)
            for (const item of data['periodsScore']) {
                PeriodScore.validateJSON(item);
            };
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['homeTeamName'] && !(typeof data['homeTeamName'] === 'string' || data['homeTeamName'] instanceof String)) {
            throw new Error("Expected the field `homeTeamName` to be a primitive type in the JSON string but got " + data['homeTeamName']);
        }
        // ensure the json data is a string
        if (data['awayTeamName'] && !(typeof data['awayTeamName'] === 'string' || data['awayTeamName'] instanceof String)) {
            throw new Error("Expected the field `awayTeamName` to be a primitive type in the JSON string but got " + data['awayTeamName']);
        }
        if (data['baseOdds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['baseOdds'])) {
                throw new Error("Expected the field `baseOdds` to be an array in the JSON data but got " + data['baseOdds']);
            }
            // validate the optional field `baseOdds` (array)
            for (const item of data['baseOdds']) {
                BookmakerBaseOdd.validateJSON(item);
            };
        }

        return true;
    }


}

BookmakerMatch.RequiredProperties = ["id", "providerId", "service", "tournamentId", "categoryId", "sportId", "homeTeamId", "awayTeamId", "dateOfMatch", "active", "matchScore", "periodsScore", "gameScore", "outright", "isHot", "homeTeamName", "enabledOddsCount"];

/**
 * @member {Number} id
 */
BookmakerMatch.prototype['id'] = undefined;

/**
 * @member {Number} providerId
 */
BookmakerMatch.prototype['providerId'] = undefined;

/**
 * @member {String} service
 */
BookmakerMatch.prototype['service'] = undefined;

/**
 * @member {Number} tournamentId
 */
BookmakerMatch.prototype['tournamentId'] = undefined;

/**
 * @member {Number} categoryId
 */
BookmakerMatch.prototype['categoryId'] = undefined;

/**
 * @member {Number} sportId
 */
BookmakerMatch.prototype['sportId'] = undefined;

/**
 * @member {String} homeTeamId
 */
BookmakerMatch.prototype['homeTeamId'] = undefined;

/**
 * @member {String} awayTeamId
 */
BookmakerMatch.prototype['awayTeamId'] = undefined;

/**
 * @member {Number} dateOfMatch
 */
BookmakerMatch.prototype['dateOfMatch'] = undefined;

/**
 * @member {Number} active
 */
BookmakerMatch.prototype['active'] = undefined;

/**
 * @member {String} status
 */
BookmakerMatch.prototype['status'] = undefined;

/**
 * @member {Number} matchTime
 */
BookmakerMatch.prototype['matchTime'] = undefined;

/**
 * @member {module:model/MatchScore} matchScore
 */
BookmakerMatch.prototype['matchScore'] = undefined;

/**
 * @member {Array.<module:model/PeriodScore>} periodsScore
 */
BookmakerMatch.prototype['periodsScore'] = undefined;

/**
 * @member {Object} gameScore
 */
BookmakerMatch.prototype['gameScore'] = undefined;

/**
 * @member {Number} activeTeam
 */
BookmakerMatch.prototype['activeTeam'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
BookmakerMatch.prototype['meta'] = undefined;

/**
 * @member {Boolean} outright
 */
BookmakerMatch.prototype['outright'] = undefined;

/**
 * @member {Boolean} isHot
 */
BookmakerMatch.prototype['isHot'] = undefined;

/**
 * @member {String} homeTeamName
 */
BookmakerMatch.prototype['homeTeamName'] = undefined;

/**
 * @member {String} awayTeamName
 */
BookmakerMatch.prototype['awayTeamName'] = undefined;

/**
 * @member {Number} enabledOddsCount
 */
BookmakerMatch.prototype['enabledOddsCount'] = undefined;

/**
 * @member {Array.<module:model/BookmakerBaseOdd>} baseOdds
 */
BookmakerMatch.prototype['baseOdds'] = undefined;






export default BookmakerMatch;

