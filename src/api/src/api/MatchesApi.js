/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PageSportMatchRead from '../model/PageSportMatchRead';
import SportMatchRead from '../model/SportMatchRead';

/**
* Matches service.
* @module api/MatchesApi
* @version 0.1.0
*/
export default class MatchesApi {

    /**
    * Constructs a new MatchesApi. 
    * @alias module:api/MatchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Incoming Matches
     * @param {Number} from_time 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getFromWithHttpInfo(from_time, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from_time' is set
      if (from_time === undefined || from_time === null) {
        throw new Error("Missing the required parameter 'from_time' when calling getFrom");
      }

      let pathParams = {
        'from_time': from_time
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/from/{from_time}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Incoming Matches
     * @param {Number} from_time 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getFrom(from_time, opts) {
      return this.getFromWithHttpInfo(from_time, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Live Matches
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getLiveWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/phase/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Live Matches
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getLive(opts) {
      return this.getLiveWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Live Matches By Tournament
     * @param {Number} tournament_id 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getLiveMatchesByTournamentWithHttpInfo(tournament_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tournament_id' is set
      if (tournament_id === undefined || tournament_id === null) {
        throw new Error("Missing the required parameter 'tournament_id' when calling getLiveMatchesByTournament");
      }

      let pathParams = {
        'tournament_id': tournament_id
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/tournament/{tournament_id}/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Live Matches By Tournament
     * @param {Number} tournament_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getLiveMatchesByTournament(tournament_id, opts) {
      return this.getLiveMatchesByTournamentWithHttpInfo(tournament_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Match
     * @param {Number} match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchRead} and HTTP response
     */
    getMatchApiV1MatchesMatchIdGetWithHttpInfo(match_id) {
      let postBody = null;
      // verify the required parameter 'match_id' is set
      if (match_id === undefined || match_id === null) {
        throw new Error("Missing the required parameter 'match_id' when calling getMatchApiV1MatchesMatchIdGet");
      }

      let pathParams = {
        'match_id': match_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/{match_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Match
     * @param {Number} match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchRead}
     */
    getMatchApiV1MatchesMatchIdGet(match_id) {
      return this.getMatchApiV1MatchesMatchIdGetWithHttpInfo(match_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Match By Bookmaker Id
     * @param {Number} bookmaker_match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchRead} and HTTP response
     */
    getMatchByBookmakerIdWithHttpInfo(bookmaker_match_id) {
      let postBody = null;
      // verify the required parameter 'bookmaker_match_id' is set
      if (bookmaker_match_id === undefined || bookmaker_match_id === null) {
        throw new Error("Missing the required parameter 'bookmaker_match_id' when calling getMatchByBookmakerId");
      }

      let pathParams = {
        'bookmaker_match_id': bookmaker_match_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/bookmaker/{bookmaker_match_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Match By Bookmaker Id
     * @param {Number} bookmaker_match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchRead}
     */
    getMatchByBookmakerId(bookmaker_match_id) {
      return this.getMatchByBookmakerIdWithHttpInfo(bookmaker_match_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Matches
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fantasy = false)] 
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getMatchesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fantasy': opts['fantasy'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Matches
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fantasy  (default to false)
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getMatches(opts) {
      return this.getMatchesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Matches By Team
     * @param {Number} team_id 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getMatchesByTeamWithHttpInfo(team_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team_id' is set
      if (team_id === undefined || team_id === null) {
        throw new Error("Missing the required parameter 'team_id' when calling getMatchesByTeam");
      }

      let pathParams = {
        'team_id': team_id
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/team/{team_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Matches By Team
     * @param {Number} team_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getMatchesByTeam(team_id, opts) {
      return this.getMatchesByTeamWithHttpInfo(team_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Matches By Tournament
     * @param {Number} tournament_id 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getMatchesByTournamentWithHttpInfo(tournament_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tournament_id' is set
      if (tournament_id === undefined || tournament_id === null) {
        throw new Error("Missing the required parameter 'tournament_id' when calling getMatchesByTournament");
      }

      let pathParams = {
        'tournament_id': tournament_id
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/tournament/{tournament_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Matches By Tournament
     * @param {Number} tournament_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getMatchesByTournament(tournament_id, opts) {
      return this.getMatchesByTournamentWithHttpInfo(tournament_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Pre Matches
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getPreWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/phase/prematch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pre Matches
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getPre(opts) {
      return this.getPreWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Pre Matches By Tournament
     * @param {Number} tournament_id 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getPreMatchesByTournamentWithHttpInfo(tournament_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tournament_id' is set
      if (tournament_id === undefined || tournament_id === null) {
        throw new Error("Missing the required parameter 'tournament_id' when calling getPreMatchesByTournament");
      }

      let pathParams = {
        'tournament_id': tournament_id
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/tournament/{tournament_id}/prematch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pre Matches By Tournament
     * @param {Number} tournament_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getPreMatchesByTournament(tournament_id, opts) {
      return this.getPreMatchesByTournamentWithHttpInfo(tournament_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
