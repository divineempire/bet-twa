/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetType from '../model/BetType';
import HTTPValidationError from '../model/HTTPValidationError';
import PageSportMatchRead from '../model/PageSportMatchRead';
import PhaseType from '../model/PhaseType';
import SportMatchRead from '../model/SportMatchRead';

/**
* Matches service.
* @module api/MatchesApi
* @version 0.1.0
*/
export default class MatchesApi {

    /**
    * Constructs a new MatchesApi. 
    * @alias module:api/MatchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Match
     * @param {Number} match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchRead} and HTTP response
     */
    getMatchWithHttpInfo(match_id) {
      let postBody = null;
      // verify the required parameter 'match_id' is set
      if (match_id === undefined || match_id === null) {
        throw new Error("Missing the required parameter 'match_id' when calling getMatch");
      }

      let pathParams = {
        'match_id': match_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/{match_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Match
     * @param {Number} match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchRead}
     */
    getMatch(match_id) {
      return this.getMatchWithHttpInfo(match_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Matches
     * @param {Object} opts Optional parameters
     * @param {String} [search] 
     * @param {Number} [tournament_id] 
     * @param {Number} [total_bets__gte] 
     * @param {Number} [total_bets__lte] 
     * @param {Number} [total_win_bets__lte] 
     * @param {Number} [total_win_bets__gte] 
     * @param {Number} [total_earned_tons__lte] 
     * @param {Number} [total_earned_tons__gte] 
     * @param {Number} [team1_summary] 
     * @param {Number} [team2_summary] 
     * @param {Number} [draw_summary] 
     * @param {Boolean} [fantasy] 
     * @param {module:model/PhaseType} [phase] 
     * @param {Boolean} [finished] 
     * @param {module:model/BetType} [type] 
     * @param {Number} [match_start_time__gte] 
     * @param {Number} [match_start_time__lte] 
     * @param {Number} [sport_id] 
     * @param {String} [order_by] 
     * @param {Number} [bookmaker_match_id] 
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getMatchesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'tournament_id': opts['tournament_id'],
        'total_bets__gte': opts['total_bets__gte'],
        'total_bets__lte': opts['total_bets__lte'],
        'total_win_bets__lte': opts['total_win_bets__lte'],
        'total_win_bets__gte': opts['total_win_bets__gte'],
        'total_earned_tons__lte': opts['total_earned_tons__lte'],
        'total_earned_tons__gte': opts['total_earned_tons__gte'],
        'team1_summary': opts['team1_summary'],
        'team2_summary': opts['team2_summary'],
        'draw_summary': opts['draw_summary'],
        'fantasy': opts['fantasy'],
        'phase': opts['phase'],
        'finished': opts['finished'],
        'type': opts['type'],
        'match_start_time__gte': opts['match_start_time__gte'],
        'match_start_time__lte': opts['match_start_time__lte'],
        'sport_id': opts['sport_id'],
        'order_by': opts['order_by'],
        'bookmaker_match_id': opts['bookmaker_match_id'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Matches
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @param {Number} opts.tournament_id 
     * @param {Number} opts.total_bets__gte 
     * @param {Number} opts.total_bets__lte 
     * @param {Number} opts.total_win_bets__lte 
     * @param {Number} opts.total_win_bets__gte 
     * @param {Number} opts.total_earned_tons__lte 
     * @param {Number} opts.total_earned_tons__gte 
     * @param {Number} opts.team1_summary 
     * @param {Number} opts.team2_summary 
     * @param {Number} opts.draw_summary 
     * @param {Boolean} opts.fantasy 
     * @param {module:model/PhaseType} opts.phase 
     * @param {Boolean} opts.finished 
     * @param {module:model/BetType} opts.type 
     * @param {Number} opts.match_start_time__gte 
     * @param {Number} opts.match_start_time__lte 
     * @param {Number} opts.sport_id 
     * @param {String} opts.order_by 
     * @param {Number} opts.bookmaker_match_id 
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getMatches(opts) {
      return this.getMatchesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Matches By Team
     * @param {Number} team_id 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchRead} and HTTP response
     */
    getMatchesByTeamWithHttpInfo(team_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team_id' is set
      if (team_id === undefined || team_id === null) {
        throw new Error("Missing the required parameter 'team_id' when calling getMatchesByTeam");
      }

      let pathParams = {
        'team_id': team_id
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchRead;
      return this.apiClient.callApi(
        '/api/v1/matches/team/{team_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Matches By Team
     * @param {Number} team_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchRead}
     */
    getMatchesByTeam(team_id, opts) {
      return this.getMatchesByTeamWithHttpInfo(team_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
