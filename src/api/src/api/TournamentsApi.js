/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PageSportTournament from '../model/PageSportTournament';
import SportTournament from '../model/SportTournament';

/**
* Tournaments service.
* @module api/TournamentsApi
* @version 0.1.0
*/
export default class TournamentsApi {

    /**
    * Constructs a new TournamentsApi. 
    * @alias module:api/TournamentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Tournament
     * @param {Number} tournament_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportTournament} and HTTP response
     */
    getTournamentApiV1TournamentsTournamentIdGetWithHttpInfo(tournament_id) {
      let postBody = null;
      // verify the required parameter 'tournament_id' is set
      if (tournament_id === undefined || tournament_id === null) {
        throw new Error("Missing the required parameter 'tournament_id' when calling getTournamentApiV1TournamentsTournamentIdGet");
      }

      let pathParams = {
        'tournament_id': tournament_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportTournament;
      return this.apiClient.callApi(
        '/api/v1/tournaments/{tournament_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Tournament
     * @param {Number} tournament_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportTournament}
     */
    getTournamentApiV1TournamentsTournamentIdGet(tournament_id) {
      return this.getTournamentApiV1TournamentsTournamentIdGetWithHttpInfo(tournament_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Tournament By Bookmaker Id
     * @param {Number} bookmaker_tournament_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportTournament} and HTTP response
     */
    getTournamentByBookmakerIdWithHttpInfo(bookmaker_tournament_id) {
      let postBody = null;
      // verify the required parameter 'bookmaker_tournament_id' is set
      if (bookmaker_tournament_id === undefined || bookmaker_tournament_id === null) {
        throw new Error("Missing the required parameter 'bookmaker_tournament_id' when calling getTournamentByBookmakerId");
      }

      let pathParams = {
        'bookmaker_tournament_id': bookmaker_tournament_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportTournament;
      return this.apiClient.callApi(
        '/api/v1/tournaments/bookmaker/{bookmaker_tournament_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Tournament By Bookmaker Id
     * @param {Number} bookmaker_tournament_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportTournament}
     */
    getTournamentByBookmakerId(bookmaker_tournament_id) {
      return this.getTournamentByBookmakerIdWithHttpInfo(bookmaker_tournament_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Tournaments
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportTournament} and HTTP response
     */
    getTournamentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportTournament;
      return this.apiClient.callApi(
        '/api/v1/tournaments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Tournaments
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportTournament}
     */
    getTournaments(opts) {
      return this.getTournamentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
