/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PageSportTeam from '../model/PageSportTeam';
import SportTeam from '../model/SportTeam';

/**
* Teams service.
* @module api/TeamsApi
* @version 0.1.0
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Team
     * @param {Number} match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportTeam} and HTTP response
     */
    getTeamWithHttpInfo(match_id) {
      let postBody = null;
      // verify the required parameter 'match_id' is set
      if (match_id === undefined || match_id === null) {
        throw new Error("Missing the required parameter 'match_id' when calling getTeam");
      }

      let pathParams = {
      };
      let queryParams = {
        'match_id': match_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportTeam;
      return this.apiClient.callApi(
        '/api/v1/teams/{team_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Team
     * @param {Number} match_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportTeam}
     */
    getTeam(match_id) {
      return this.getTeamWithHttpInfo(match_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Team By Bookmaker Id
     * @param {Number} bookmaker_team_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportTeam} and HTTP response
     */
    getTeamByBookmakerIdWithHttpInfo(bookmaker_team_id) {
      let postBody = null;
      // verify the required parameter 'bookmaker_team_id' is set
      if (bookmaker_team_id === undefined || bookmaker_team_id === null) {
        throw new Error("Missing the required parameter 'bookmaker_team_id' when calling getTeamByBookmakerId");
      }

      let pathParams = {
        'bookmaker_team_id': bookmaker_team_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportTeam;
      return this.apiClient.callApi(
        '/api/v1/teams/bookmaker/{bookmaker_team_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Team By Bookmaker Id
     * @param {Number} bookmaker_team_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportTeam}
     */
    getTeamByBookmakerId(bookmaker_team_id) {
      return this.getTeamByBookmakerIdWithHttpInfo(bookmaker_team_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Teams
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportTeam} and HTTP response
     */
    getTeamsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportTeam;
      return this.apiClient.callApi(
        '/api/v1/teams/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Teams
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportTeam}
     */
    getTeams(opts) {
      return this.getTeamsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
