/**
 * BetCoffee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PageSportMatchBet from '../model/PageSportMatchBet';
import PageSportMatchBetRead from '../model/PageSportMatchBetRead';
import SportMatchBet from '../model/SportMatchBet';
import SportMatchBetCreate from '../model/SportMatchBetCreate';
import SportMatchBetRead from '../model/SportMatchBetRead';
import SportMatchBetUpdate from '../model/SportMatchBetUpdate';

/**
* Bets service.
* @module api/BetsApi
* @version 0.1.0
*/
export default class BetsApi {

    /**
    * Constructs a new BetsApi. 
    * @alias module:api/BetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Bet
     * @param {String} X_Init_Data initData из <a href=\"https://core.telegram.org/bots/webapps#webappinitdata\">window.Telegram.WebApp</a>
     * @param {module:model/SportMatchBetCreate} SportMatchBetCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchBetRead} and HTTP response
     */
    createFantasyBetWithHttpInfo(X_Init_Data, SportMatchBetCreate) {
      let postBody = SportMatchBetCreate;
      // verify the required parameter 'X_Init_Data' is set
      if (X_Init_Data === undefined || X_Init_Data === null) {
        throw new Error("Missing the required parameter 'X_Init_Data' when calling createFantasyBet");
      }
      // verify the required parameter 'SportMatchBetCreate' is set
      if (SportMatchBetCreate === undefined || SportMatchBetCreate === null) {
        throw new Error("Missing the required parameter 'SportMatchBetCreate' when calling createFantasyBet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Init-Data': X_Init_Data
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SportMatchBetRead;
      return this.apiClient.callApi(
        '/api/v1/bets/fantasy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Bet
     * @param {String} X_Init_Data initData из <a href=\"https://core.telegram.org/bots/webapps#webappinitdata\">window.Telegram.WebApp</a>
     * @param {module:model/SportMatchBetCreate} SportMatchBetCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchBetRead}
     */
    createFantasyBet(X_Init_Data, SportMatchBetCreate) {
      return this.createFantasyBetWithHttpInfo(X_Init_Data, SportMatchBetCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finalize Bet
     * @param {Number} bet_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchBet} and HTTP response
     */
    finalizeBetApiV1BetsFantasyFinalizeBetIdPatchWithHttpInfo(bet_id) {
      let postBody = null;
      // verify the required parameter 'bet_id' is set
      if (bet_id === undefined || bet_id === null) {
        throw new Error("Missing the required parameter 'bet_id' when calling finalizeBetApiV1BetsFantasyFinalizeBetIdPatch");
      }

      let pathParams = {
        'bet_id': bet_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportMatchBet;
      return this.apiClient.callApi(
        '/api/v1/bets/fantasy/finalize/{bet_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Finalize Bet
     * @param {Number} bet_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchBet}
     */
    finalizeBetApiV1BetsFantasyFinalizeBetIdPatch(bet_id) {
      return this.finalizeBetApiV1BetsFantasyFinalizeBetIdPatchWithHttpInfo(bet_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bet
     * @param {Number} bet_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchBetRead} and HTTP response
     */
    getBetWithHttpInfo(bet_id) {
      let postBody = null;
      // verify the required parameter 'bet_id' is set
      if (bet_id === undefined || bet_id === null) {
        throw new Error("Missing the required parameter 'bet_id' when calling getBet");
      }

      let pathParams = {
        'bet_id': bet_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportMatchBetRead;
      return this.apiClient.callApi(
        '/api/v1/bets/{bet_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bet
     * @param {Number} bet_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchBetRead}
     */
    getBet(bet_id) {
      return this.getBetWithHttpInfo(bet_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bets By Match
     * @param {Number} match_id 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchBet} and HTTP response
     */
    getBetsByMatchApiV1BetsMatchMatchIdGetWithHttpInfo(match_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'match_id' is set
      if (match_id === undefined || match_id === null) {
        throw new Error("Missing the required parameter 'match_id' when calling getBetsByMatchApiV1BetsMatchMatchIdGet");
      }

      let pathParams = {
        'match_id': match_id
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchBet;
      return this.apiClient.callApi(
        '/api/v1/bets/match/{match_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bets By Match
     * @param {Number} match_id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchBet}
     */
    getBetsByMatchApiV1BetsMatchMatchIdGet(match_id, opts) {
      return this.getBetsByMatchApiV1BetsMatchMatchIdGetWithHttpInfo(match_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bets By User
     * @param {String} X_Init_Data initData из <a href=\"https://core.telegram.org/bots/webapps#webappinitdata\">window.Telegram.WebApp</a>
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fantasy] 
     * @param {Number} [page = 1)] Page number
     * @param {Number} [size = 50)] Page size
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageSportMatchBetRead} and HTTP response
     */
    getUserBetsWithHttpInfo(X_Init_Data, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'X_Init_Data' is set
      if (X_Init_Data === undefined || X_Init_Data === null) {
        throw new Error("Missing the required parameter 'X_Init_Data' when calling getUserBets");
      }

      let pathParams = {
      };
      let queryParams = {
        'fantasy': opts['fantasy'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'X-Init-Data': X_Init_Data
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageSportMatchBetRead;
      return this.apiClient.callApi(
        '/api/v1/bets/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bets By User
     * @param {String} X_Init_Data initData из <a href=\"https://core.telegram.org/bots/webapps#webappinitdata\">window.Telegram.WebApp</a>
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fantasy 
     * @param {Number} opts.page Page number (default to 1)
     * @param {Number} opts.size Page size (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageSportMatchBetRead}
     */
    getUserBets(X_Init_Data, opts) {
      return this.getUserBetsWithHttpInfo(X_Init_Data, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Bet
     * @param {Number} bet_id 
     * @param {module:model/SportMatchBetUpdate} SportMatchBetUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SportMatchBet} and HTTP response
     */
    updateBetApiV1BetsBetIdPatchWithHttpInfo(bet_id, SportMatchBetUpdate) {
      let postBody = SportMatchBetUpdate;
      // verify the required parameter 'bet_id' is set
      if (bet_id === undefined || bet_id === null) {
        throw new Error("Missing the required parameter 'bet_id' when calling updateBetApiV1BetsBetIdPatch");
      }
      // verify the required parameter 'SportMatchBetUpdate' is set
      if (SportMatchBetUpdate === undefined || SportMatchBetUpdate === null) {
        throw new Error("Missing the required parameter 'SportMatchBetUpdate' when calling updateBetApiV1BetsBetIdPatch");
      }

      let pathParams = {
        'bet_id': bet_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SportMatchBet;
      return this.apiClient.callApi(
        '/api/v1/bets/{bet_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Bet
     * @param {Number} bet_id 
     * @param {module:model/SportMatchBetUpdate} SportMatchBetUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SportMatchBet}
     */
    updateBetApiV1BetsBetIdPatch(bet_id, SportMatchBetUpdate) {
      return this.updateBetApiV1BetsBetIdPatchWithHttpInfo(bet_id, SportMatchBetUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
